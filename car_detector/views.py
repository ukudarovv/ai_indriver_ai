from django.shortcuts import render, redirect, get_object_or_404
from django.contrib import messages
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from django.views.decorators.http import require_http_methods
from django.core.files.storage import default_storage
from django.core.files.base import ContentFile
import json
import os
import tempfile

from .models import CarAnalysis
from .services import car_analysis_service
from .translations import (
    translate_car_part, translate_damage_type, translate_integrity,
    translate_cleanliness, translate_weather, translate_lighting
)


def home(request):
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Ñ–æ—Ä–º–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    recent_analyses = CarAnalysis.objects.all()[:5]
    return render(request, 'car_detector/home.html', {
        'recent_analyses': recent_analyses
    })


def upload_and_analyze(request):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if request.method == 'POST':
        if 'image' not in request.FILES:
            messages.error(request, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ')
            return redirect('dual_analysis')
        
        image_file = request.FILES['image']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
        allowed_types = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp']
        if image_file.content_type not in allowed_types:
            messages.error(request, '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: JPEG, PNG, WebP')
            return redirect('dual_analysis')
        
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with tempfile.NamedTemporaryFile(delete=False, suffix='.jpg') as temp_file:
                for chunk in image_file.chunks():
                    temp_file.write(chunk)
                temp_path = temp_file.name
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            analysis_results = car_analysis_service.analyze_image(temp_path)
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            car_analysis = CarAnalysis()
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å —Ñ–∞–π–ª–∞ –≤ –Ω–∞—á–∞–ª–æ
            image_file.seek(0)
            car_analysis.image.save(
                image_file.name,
                ContentFile(image_file.read()),
                save=False
            )
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
            formatted_data = car_analysis_service.format_results_for_django(analysis_results)
            for key, value in formatted_data.items():
                setattr(car_analysis, key, value)
            
            car_analysis.save()
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –Ω–∞–ª–æ–∂–µ–Ω–Ω—ã–º–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏
            try:
                processed_path = car_analysis_service.create_processed_image(
                    temp_path, 
                    analysis_results.get('gemini', {}), 
                    analysis_results.get('yolo', {})
                )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                if processed_path != temp_path and os.path.exists(processed_path):
                    with open(processed_path, 'rb') as processed_file:
                        car_analysis.processed_image.save(
                            f"processed_{image_file.name}",
                            ContentFile(processed_file.read()),
                            save=True
                        )
                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
                    os.unlink(processed_path)
                    
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.unlink(temp_path)
            
            messages.success(request, '–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!')
            return redirect('analysis_detail', analysis_id=car_analysis.id)
            
        except Exception as e:
            messages.error(request, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {str(e)}')
            return redirect('dual_analysis')
    
    return redirect('dual_analysis')


def dual_analysis(request):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –¥–≤–æ–π–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å Gemini –∏ YOLO"""
    return render(request, 'car_detector/dual_analysis.html')


def analysis_detail(request, analysis_id):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞"""
    analysis = get_object_or_404(CarAnalysis, id=analysis_id)
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —à–∞–±–ª–æ–Ω–∞
    context = {
        'analysis': analysis,
        'gemini_damage_parts': analysis.gemini_damage_details.get('parts', []),
        'yolo_detections': analysis.yolo_detections,
        'environment': analysis.gemini_environment,
        # –§—É–Ω–∫—Ü–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
        'translate_car_part': translate_car_part,
        'translate_damage_type': translate_damage_type,
        'translate_integrity': translate_integrity,
        'translate_cleanliness': translate_cleanliness,
        'translate_weather': translate_weather,
        'translate_lighting': translate_lighting,
    }
    
    return render(request, 'car_detector/analysis_detail.html', context)


def analysis_list(request):
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–Ω–∞–ª–∏–∑–æ–≤"""
    analyses = CarAnalysis.objects.all()
    return render(request, 'car_detector/analysis_list.html', {
        'analyses': analyses
    })


@csrf_exempt
@require_http_methods(["POST"])
def api_analyze(request):
    """API endpoint –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        if 'image' not in request.FILES:
            return JsonResponse({'error': 'No image provided'}, status=400)
        
        image_file = request.FILES['image']
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(delete=False, suffix='.jpg') as temp_file:
            for chunk in image_file.chunks():
                temp_file.write(chunk)
            temp_path = temp_file.name
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
        analysis_results = car_analysis_service.analyze_image(temp_path)
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.unlink(temp_path)
        
        return JsonResponse({
            'success': True,
            'results': analysis_results
        })
        
    except Exception as e:
        return JsonResponse({
            'success': False,
            'error': str(e)
        }, status=500)


@csrf_exempt
@require_http_methods(["POST"])
def api_gemini_analyze(request):
    """API endpoint –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ —Å –ø–æ–º–æ—â—å—é Gemini"""
    try:
        if 'image' not in request.FILES:
            return JsonResponse({'error': 'No image provided'}, status=400)
        
        image_file = request.FILES['image']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
        allowed_extensions = ['.jpg', '.jpeg', '.png', '.webp']
        file_extension = os.path.splitext(image_file.name)[1].lower()
        if file_extension not in allowed_extensions:
            return JsonResponse({'error': f'File must be an image. Got extension: {file_extension}'}, status=400)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(delete=False, suffix='.jpg') as temp_file:
            for chunk in image_file.chunks():
                temp_file.write(chunk)
            temp_path = temp_file.name
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Å –ø–æ–º–æ—â—å—é Gemini
        try:
            import time
            start_time = time.time()
            
            gemini_results = car_analysis_service.gemini_analyzer.analyze(temp_path)
            processing_time = time.time() - start_time
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response_data = {
                'status': 'success',
                'model': 'gemini',
                'results': gemini_results,
                'processing_time': round(processing_time, 2)
            }
            
            return JsonResponse(response_data)
            
        except Exception as e:
            return JsonResponse({
                'status': 'error',
                'error': f'Gemini analysis failed: {str(e)}'
            }, status=500)
        
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            if os.path.exists(temp_path):
                os.unlink(temp_path)
        
    except Exception as e:
        error_text = f"""üöó –ê–ù–ê–õ–ò–ó –ê–í–¢–û–ú–û–ë–ò–õ–Ø

‚ùå –û–®–ò–ë–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò:
‚Ä¢ {str(e)}

‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."""
        
        return JsonResponse({
            'status': 'error',
            'model': 'gemini',
            'processing_time': 0.0,
            'analysis_text': error_text,
            'error': str(e)
        }, status=500)


@csrf_exempt
@require_http_methods(["POST"])
def api_simple_status(request):
    """API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
    try:
        if 'image' not in request.FILES:
            return JsonResponse({'error': 'No image provided'}, status=400)
        
        image_file = request.FILES['image']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
        allowed_extensions = ['.jpg', '.jpeg', '.png', '.webp']
        file_extension = os.path.splitext(image_file.name)[1].lower()
        if file_extension not in allowed_extensions:
            return JsonResponse({'error': f'File must be an image. Got extension: {file_extension}'}, status=400)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(delete=False, suffix='.jpg') as temp_file:
            for chunk in image_file.chunks():
                temp_file.write(chunk)
            temp_path = temp_file.name
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Å –ø–æ–º–æ—â—å—é Gemini
        try:
            import time
            start_time = time.time()
            
            gemini_results = car_analysis_service.gemini_analyzer.analyze(temp_path)
            processing_time = time.time() - start_time
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—à–∏–±–∫–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö Gemini
            if 'error' in gemini_results:
                error_text = f"""üöó –ê–ù–ê–õ–ò–ó –ê–í–¢–û–ú–û–ë–ò–õ–Ø

‚ùå –û–®–ò–ë–ö–ê –ê–ù–ê–õ–ò–ó–ê:
‚Ä¢ {gemini_results['error']}

‚ö†Ô∏è –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.

‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {round(processing_time, 2)}—Å"""
                
                return JsonResponse({
                    'status': 'error',
                    'model': 'gemini',
                    'processing_time': round(processing_time, 2),
                    'analysis_text': error_text,
                    'error': gemini_results['error']
                })
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∫–∞–∫ –Ω–∞ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü–µ
            integrity = gemini_results.get('integrity', {})
            cleanliness = gemini_results.get('cleanliness', {})
            damage_details = gemini_results.get('damage_details', {})
            environment = gemini_results.get('environment', {})
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
            if integrity.get('label') == 'damaged':
                status = "damaged"
                status_text = "–ü–æ–≤—Ä–µ–∂–¥–µ–Ω"
            else:
                status = "good"
                status_text = "–í —Ö–æ—Ä–æ—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏"
            
            # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π
            damage_count = len(damage_details.get('parts', []))
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —á–∏—Å—Ç–æ—Ç—ã
            cleanliness_level = cleanliness.get('label', 'unknown')
            if cleanliness_level == 'clean':
                cleanliness_text = "—á–∏—Å—Ç—ã–π"
            elif cleanliness_level == 'slightly_dirty':
                cleanliness_text = "—Å–ª–µ–≥–∫–∞ –≥—Ä—è–∑–Ω—ã–π"
            elif cleanliness_level == 'dirty':
                cleanliness_text = "–≥—Ä—è–∑–Ω—ã–π"
            else:
                cleanliness_text = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –∫–∞–∫ –Ω–∞ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü–µ
            text_response = f"""üöó –ê–ù–ê–õ–ò–ó –ê–í–¢–û–ú–û–ë–ò–õ–Ø

üìä –û–ë–©–ï–ï –°–û–°–¢–û–Ø–ù–ò–ï:
‚Ä¢ –¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å: {status_text} ({round(integrity.get('confidence', 0) * 100, 1)}%)
‚Ä¢ –ß–∏—Å—Ç–æ—Ç–∞: {cleanliness_text} ({round(cleanliness.get('confidence', 0) * 100, 1)}%)

üîç –î–ï–¢–ê–õ–ò –ü–û–í–†–ï–ñ–î–ï–ù–ò–ô:
‚Ä¢ –ù–∞–π–¥–µ–Ω–æ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π: {damage_count}
‚Ä¢ –û–±—â–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {round(damage_details.get('overall_confidence', 0) * 100, 1)}%"""

            # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –∫–∞–∂–¥–æ–≥–æ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è
            if damage_count > 0:
                text_response += "\n\nüìã –°–ü–ò–°–û–ö –ü–û–í–†–ï–ñ–î–ï–ù–ò–ô:"
                for i, part in enumerate(damage_details.get('parts', []), 1):
                    part_name = part.get('part', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —á–∞—Å—Ç—å')
                    damage_type = part.get('type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø')
                    confidence = round(part.get('confidence', 0) * 100, 1)
                    other_desc = part.get('other_desc', '')
                    
                    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏—è —á–∞—Å—Ç–µ–π –Ω–∞ —Ä—É—Å—Å–∫–∏–π
                    part_translations = {
                        'hood': '–ö–∞–ø–æ—Ç',
                        'bumper_front': '–ü–µ—Ä–µ–¥–Ω–∏–π –±–∞–º–ø–µ—Ä',
                        'bumper_rear': '–ó–∞–¥–Ω–∏–π –±–∞–º–ø–µ—Ä',
                        'fender_left': '–õ–µ–≤–æ–µ –∫—Ä—ã–ª–æ',
                        'fender_right': '–ü—Ä–∞–≤–æ–µ –∫—Ä—ã–ª–æ',
                        'door_left_front': '–õ–µ–≤–∞—è –ø–µ—Ä–µ–¥–Ω—è—è –¥–≤–µ—Ä—å',
                        'door_left_rear': '–õ–µ–≤–∞—è –∑–∞–¥–Ω—è—è –¥–≤–µ—Ä—å',
                        'door_right_front': '–ü—Ä–∞–≤–∞—è –ø–µ—Ä–µ–¥–Ω—è—è –¥–≤–µ—Ä—å',
                        'door_right_rear': '–ü—Ä–∞–≤–∞—è –∑–∞–¥–Ω—è—è –¥–≤–µ—Ä—å',
                        'trunk': '–ë–∞–≥–∞–∂–Ω–∏–∫',
                        'headlight_left': '–õ–µ–≤–∞—è —Ñ–∞—Ä–∞',
                        'headlight_right': '–ü—Ä–∞–≤–∞—è —Ñ–∞—Ä–∞',
                        'taillight_left': '–õ–µ–≤—ã–π –∑–∞–¥–Ω–∏–π —Ñ–æ–Ω–∞—Ä—å',
                        'taillight_right': '–ü—Ä–∞–≤—ã–π –∑–∞–¥–Ω–∏–π —Ñ–æ–Ω–∞—Ä—å',
                        'mirror_left': '–õ–µ–≤–æ–µ –∑–µ—Ä–∫–∞–ª–æ',
                        'mirror_right': '–ü—Ä–∞–≤–æ–µ –∑–µ—Ä–∫–∞–ª–æ',
                        'windshield': '–õ–æ–±–æ–≤–æ–µ —Å—Ç–µ–∫–ª–æ',
                        'side_window_left': '–õ–µ–≤–æ–µ –±–æ–∫–æ–≤–æ–µ —Å—Ç–µ–∫–ª–æ',
                        'side_window_right': '–ü—Ä–∞–≤–æ–µ –±–æ–∫–æ–≤–æ–µ —Å—Ç–µ–∫–ª–æ',
                        'wheel_left_front': '–õ–µ–≤–æ–µ –ø–µ—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–µ—Å–æ',
                        'wheel_right_front': '–ü—Ä–∞–≤–æ–µ –ø–µ—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–µ—Å–æ',
                        'wheel_left_rear': '–õ–µ–≤–æ–µ –∑–∞–¥–Ω–µ–µ –∫–æ–ª–µ—Å–æ',
                        'wheel_right_rear': '–ü—Ä–∞–≤–æ–µ –∑–∞–¥–Ω–µ–µ –∫–æ–ª–µ—Å–æ',
                        'roof': '–ö—Ä—ã—à–∞',
                        'sill_left': '–õ–µ–≤—ã–π –ø–æ—Ä–æ–≥',
                        'sill_right': '–ü—Ä–∞–≤—ã–π –ø–æ—Ä–æ–≥'
                    }
                    
                    # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ç–∏–ø—ã –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π
                    type_translations = {
                        'scratch': '–¶–∞—Ä–∞–ø–∏–Ω–∞',
                        'dent': '–í–º—è—Ç–∏–Ω–∞',
                        'crack': '–¢—Ä–µ—â–∏–Ω–∞',
                        'broken_glass': '–†–∞–∑–±–∏—Ç–æ–µ —Å—Ç–µ–∫–ª–æ',
                        'paint_peel': '–û—Ç—Å–ª–æ–µ–Ω–∏–µ –∫—Ä–∞—Å–∫–∏',
                        'rust': '–†–∂–∞–≤—á–∏–Ω–∞',
                        'misalignment': '–ü–µ—Ä–µ–∫–æ—Å',
                        'missing_part': '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∞—è –¥–µ—Ç–∞–ª—å',
                        'other': '–î—Ä—É–≥–æ–µ'
                    }
                    
                    part_ru = part_translations.get(part_name, part_name)
                    type_ru = type_translations.get(damage_type, damage_type)
                    
                    if other_desc and damage_type == 'other':
                        type_ru = f"{type_ru} ({other_desc})"
                    
                    text_response += f"\n{i}. {part_ru}: {type_ru} ({confidence}%)"
            else:
                text_response += "\n\n‚úÖ –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ"

            # –î–æ–±–∞–≤–ª—è–µ–º —É—Å–ª–æ–≤–∏—è —Å—ä–µ–º–∫–∏
            weather = environment.get('weather', 'unknown')
            lighting = environment.get('lighting', 'unknown')
            glare_pct = round(environment.get('glare_coverage_pct', 0) * 100, 1)
            humidity_pct = round(environment.get('wetness_pct', 0) * 100, 1)
            
            weather_translations = {
                'sunny': '–°–æ–ª–Ω–µ—á–Ω–æ',
                'cloudy': '–û–±–ª–∞—á–Ω–æ',
                'rain': '–î–æ–∂–¥—å',
                'snow': '–°–Ω–µ–≥',
                'fog': '–¢—É–º–∞–Ω',
                'night': '–ù–æ—á—å',
                'indoor': '–í –ø–æ–º–µ—â–µ–Ω–∏–∏',
                'unknown': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
            }
            
            lighting_translations = {
                'normal': '–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ',
                'low_light': '–°–ª–∞–±–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ',
                'strong_glare': '–°–∏–ª—å–Ω—ã–µ –±–ª–∏–∫–∏',
                'backlight': '–ö–æ–Ω—Ç—Ä–æ–≤—ã–π —Å–≤–µ—Ç',
                'mixed': '–°–º–µ—à–∞–Ω–Ω–æ–µ',
                'artificial': '–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–µ',
                'unknown': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
            }
            
            weather_ru = weather_translations.get(weather, weather)
            lighting_ru = lighting_translations.get(lighting, lighting)
            
            text_response += f"""

üå§Ô∏è –£–°–õ–û–í–ò–Ø –°–™–ï–ú–ö–ò:
‚Ä¢ –ü–æ–≥–æ–¥–∞: {weather_ru}
‚Ä¢ –û—Å–≤–µ—â–µ–Ω–∏–µ: {lighting_ru}
‚Ä¢ –ë–ª–∏–∫–∏: {glare_pct}%
‚Ä¢ –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity_pct}%
‚Ä¢ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {round(environment.get('confidence', 0) * 100, 1)}%

‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {round(processing_time, 2)}—Å"""

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
            notes = gemini_results.get('notes', '')
            if notes:
                text_response += f"\n\nüìù –ó–∞–º–µ—Ç–∫–∏: {notes}"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º JSON –æ—Ç–≤–µ—Ç —Å —Ç–µ–∫—Å—Ç–æ–º
            response_data = {
                'status': 'success',
                'model': 'gemini',
                'processing_time': round(processing_time, 2),
                'analysis_text': text_response,
                'summary': {
                    'integrity': status_text,
                    'cleanliness': cleanliness_text,
                    'damage_count': damage_count,
                    'weather': weather_ru,
                    'lighting': lighting_ru
                }
            }
            
            return JsonResponse(response_data)
            
        except Exception as e:
            error_text = f"""üöó –ê–ù–ê–õ–ò–ó –ê–í–¢–û–ú–û–ë–ò–õ–Ø

‚ùå –û–®–ò–ë–ö–ê –ê–ù–ê–õ–ò–ó–ê:
‚Ä¢ {str(e)}

‚ö†Ô∏è –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.

‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {round(time.time() - start_time, 2)}—Å"""
            
            return JsonResponse({
                'status': 'error',
                'model': 'gemini',
                'processing_time': round(time.time() - start_time, 2),
                'analysis_text': error_text,
                'error': f'Analysis failed: {str(e)}'
            }, status=500)
        
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            if os.path.exists(temp_path):
                os.unlink(temp_path)
        
    except Exception as e:
        error_text = f"""üöó –ê–ù–ê–õ–ò–ó –ê–í–¢–û–ú–û–ë–ò–õ–Ø

‚ùå –û–®–ò–ë–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò:
‚Ä¢ {str(e)}

‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."""
        
        return JsonResponse({
            'status': 'error',
            'model': 'gemini',
            'processing_time': 0.0,
            'analysis_text': error_text,
            'error': str(e)
        }, status=500)
